import { ColumnType, CreateTableBuilder, RawBuilder, sql } from 'kysely'

import type { KyselyDatabase } from './client'

/**
 * Columns that are generated by the database should be marked using
 * the `Generated` type. This way they are automatically made optional
 * in inserts and updates.
 *
 * You can specify a different type for each operation (select, insert and
 * update) using the `ColumnType<SelectType, InsertType, UpdateType>` wrapper.
 * Here we define a column `updated_at` that is selected as a `Date`, can
 * optionally be provided as a `string` in inserts and can never be updated.
 */

export interface WithTimeStampSchema {
  created_at: ColumnType<Date, string | undefined, never>
  updated_at: ColumnType<Date, string | undefined, never>
}

export interface WithSoftDeleteSchema {
  deleted_at: ColumnType<Date, string | undefined, never>
}

// Timestamp (ISO 8601 UTC)
export const defaultTimestamp = sql`timezone('utc'::text, now())`

export const defaultJSONB = sql`'{}'::jsonb`

export const PRIMARY_KEY_COLUMN = <T extends string, C extends string = never>(
  builder: CreateTableBuilder<T, C>
) => builder.addColumn('id', 'uuid', (col) => col.primaryKey().defaultTo(sql`uuid_generate_v4()`))

export const PRIMARY_KEY_SERIAL_COLUMN = <T extends string, C extends string = never>(
  builder: CreateTableBuilder<T, C>
) => builder.addColumn('id', 'bigserial', (col) => col.primaryKey())

export const TIMESTAMPS_COLUMN = <T extends string, C extends string = never>(
  builder: CreateTableBuilder<T, C>
) => {
  return builder
    .addColumn('created_at', 'timestamp', (col) => col.defaultTo(defaultTimestamp).notNull())
    .addColumn('updated_at', 'timestamp', (col) => col.defaultTo(defaultTimestamp).notNull())
}

export const SOFT_DELETED_COLUMN = <T extends string, C extends string = never>(
  builder: CreateTableBuilder<T, C>
) => builder.addColumn('deleted_at', 'timestamp')

/* @reference: https://www.kysely.dev/docs/recipes/relations */
export function json<T>(value: T): RawBuilder<T> {
  return sql`CAST(${JSON.stringify(value)} AS JSONB)`
}
